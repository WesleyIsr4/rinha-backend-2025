services:
  # Load Balancer - Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "9999:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "50MB"

  # Application Instance 1
  app1:
    build: .
    container_name: rinha-app-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - SIMULATE_PAYMENTS=true
    networks:
      - app-network
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "150MB"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application Instance 2
  app2:
    build: .
    container_name: rinha-app-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - SIMULATE_PAYMENTS=true
    networks:
      - app-network
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "150MB"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rinha-postgres
    environment:
      - POSTGRES_DB=rinha_backend
      - POSTGRES_USER=rinha_user
      - POSTGRES_PASSWORD=rinha_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "100MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rinha_user -d rinha_backend"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rinha-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "50MB"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge
  payment-processor:
    external: true

volumes:
  postgres_data:
  redis_data:
